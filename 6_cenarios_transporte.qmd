#  Comparando a acessibilidade entre dois cenários de transporte

Neste capítulo, avaliaremos o impacto de um cenário simplificado de um investimento de infraestrutura de transporte real: a implementação da Linha Leste do metrô de Fortaleza. O traçado da Linha Leste possui 7.3 km de extensão e liga o Centro de Fortaleza ao bairro Papicu, permitindo a integração das linhas de metrô Sul e Oeste com corredores de VLT e o terminal de ônibus no Papicu. É importante notar que a implementação deste investimento implica também em mudanças nas frequências das linhas de metrô Sul e Oeste e também no racionamento do sistema de ônibus municipais, conforme o Plano de Acessibilidade Sustentável de Fortaleza (Pasfor)[^1]. Essas mudanças adicionais no sistema de transporte público não foram incorporados aos nossos cenários. Para uma avaliação mais completa do impacto de acessibilidade da implementação da Linha Leste e das mudanças previstas no Pasfor, por favor veja @ref.

[^1]: Disponível em <https://www.pasfor.com.br/>.

Para isso, precisaremos comparar os níveis de acessibilidade antes e depois da implementação do novo corredor. Precisamos, portanto, utilizar diferentes arquivos GTFS para representar os cenários antes e depois, calcular duas matrizes de tempo de viagem distintas (uma antes e outra depois do investimento), calcular dois conjuntos de níveis de acessibilidade distintos e comparar esses conjuntos. Neste capítulo, vamos cobrir este passo-a-passo em detalhes, começando primeiro pelo detalhamento dos GTFS que vamos usar.

## Arquivos GTFS usados na análise

Nesta análise, usaremos os arquivos GTFS da METROFOR e da ETUFOR, que descrevem o sistema de transporte público operante na cidade de Fortaleza. Como esses são arquivos grandes, somando quase 20 MB no total, eles não estão disponíveis dentro dos pacotes `{r5r}` e `{gtfstools}`, como até então era o caso das amostras de *feeds* que usamos nos exemplos. Precisamos, portanto, baixá-los para o nosso projeto:

```{r}
#| results: false
metrofor_path <- tempfile("metrofor", fileext = ".zip")
etufor_path <- tempfile("etufor", fileext = ".zip")

httr::GET(
  "https://github.com/ipeaGIT/intro_access_book/releases/download/data_1st_edition/gtfs_for_metrofor_2021-01.zip",
  httr::write_disk(metrofor_path)
)

httr::GET(
  "https://github.com/ipeaGIT/intro_access_book/releases/download/data_1st_edition/gtfs_for_etufor_2019-10.zip",
  httr::write_disk(etufor_path)
)
```

Para simularmos a operação da nova Linha Leste do metrô, precisamos também de um *feed* que descreva o funcionamento deste corredor. Este GTFS foi criado para o estudo de @ref, que avalia o impacto de acessibilidade da implementação da Linha Leste, e será reutilizado neste exemplo. Assim como os *feeds* da ETUFOR e da METROFOR, este arquivo GTFS está disponível para *download* no repositório do livro no GitHub:

```{r}
#| results: false
linha_leste_path <- tempfile("linha_leste", fileext = ".zip")

httr::GET(
  "https://github.com/ipeaGIT/intro_access_book/releases/download/data_1st_edition/gtfs_linha_leste.zip",
  httr::write_disk(linha_leste_path)
)
```

Esses três arquivos GTFS serão usados em conjunto para calcular a acessibilidade dos cenários antes e depois. No primeiro, apenas os *feeds* da METROFOR e da ETUFOR serão usados no roteamento de transporte público, representando a típica operação de transporte público antes da implementação do novo corredor. No cenário pós-implementação, incluiremos também o GTFS da Linha Leste, incorporando à análise a operação planejada desta linha após sua finalização.

## Cálculo das matrizes de tempo de viagem

Tendo definido quais arquivos GTFS vamos usar em cada um dos cenários analisados, precisamos agora utilizá-los para calcular as matrizez de tempo de viagem, que por sua vez vamos usar para estimar os níveis de acessibilidade. Como apresentado na @sec-matrix, para isso vamos utilizar a função `travel_time_matrix()`, do pacote `{r5r}`.

Antes de calcular as matrizes de fato, nós precisamos organizar os nossos arquivos na estrutura que o `{r5r}` requer. Cada um dos nossos cenários (antes e depois) deve ser representado por uma pasta contendo os arquivos necessários para o roteamento. Vamos criar uma pasta dentro da qual vamos botar as pastas do roteamento:

```{r}
#| warning: false
analysis_dir <- "impact_analysis"

dir.create(analysis_dir)
```

Dentro desta pasta, vamos criar as pastas de roteamento dos cenários antes e depois, contendo seus respectivos *feeds*:

```{r}
#| results: false
#| warning: false
dir_before <- file.path(analysis_dir, "before")
dir_after <- file.path(analysis_dir, "after")

dir.create(dir_before)
dir.create(dir_after)

file.copy(from = metrofor_path, to = file.path(dir_before, "metrofor.zip"))
file.copy(from = metrofor_path, to = file.path(dir_after, "metrofor.zip"))

file.copy(from = etufor_path, to = file.path(dir_before, "etufor.zip"))
file.copy(from = etufor_path, to = file.path(dir_after, "etufor.zip"))

file.copy(from = linha_leste_path, to = file.path(dir_after, "linha_leste.zip"))

fs::dir_tree(analysis_dir)
```

```{r}
#| echo: false
#| results: false
#| warning: false

# this line below should be enough, but it's not due to a {fs} bug:
#  https://github.com/r-lib/fs/issues/398
fs::dir_tree(analysis_dir, glob = "*.zip")

# so instead we're always moving the files that should not appear in the file
# listing below to a tempdir and then moving them back to their original dir
files_to_move <- c(
  "network.dat",
  "street_network.osm.pbf.mapdb",
  "street_network.osm.pbf.mapdb.p",
  "street_network.osm.pbf",
  "topography.tif"
)

before_tmp <- tempfile("before")
dir.create(before_tmp)
file.rename(
  file.path(dir_before, files_to_move),
  file.path(before_tmp, files_to_move)
)

after_tmp <- tempfile("after")
dir.create(after_tmp)
file.rename(
  file.path(dir_after, files_to_move),
  file.path(after_tmp, files_to_move)
)
```

```{r}
#| echo: false
fs::dir_tree(analysis_dir)
```

```{r}
#| echo: false
#| results: false
#| warning: false
file.rename(
  file.path(before_tmp, files_to_move),
  file.path(dir_before, files_to_move)
)

file.rename(
  file.path(after_tmp, files_to_move),
  file.path(dir_after, files_to_move)
)
```

Para estimarmos o tempo de viagem na nossa área de estudo, precisamos ainda de um arquivo representando a rede viária do local, em formato `.pbf`, e opcionalmente iremos utilizar um arquivo representando a topografia local, em formato `.tif`. Esses arquivos, asssim como os GTFS, estão disponíveis para *download* no repositório do livro. Partindo do pressuposto que a implementação da Linha Leste não afetaria o traçado das ruas e calçadas na região, bem como a topografia local, podemos usar os mesmos arquivos nas duas matrizes de tempo de viagem:

```{r}
#| results: false
pbf_path <- tempfile("street_network", fileext = ".osm.pbf")
tif_path <- tempfile("topography", fileext = ".tif")

httr::GET(
  "https://github.com/ipeaGIT/intro_access_book/releases/download/data_1st_edition/for_2020.osm.pbf",
  httr::write_disk(pbf_path)
)
httr::GET(
  "https://github.com/ipeaGIT/intro_access_book/releases/download/data_1st_edition/topografia3_for.tif",
  httr::write_disk(tif_path)
)

file.copy(from = pbf_path, to = file.path(dir_before, "street_network.osm.pbf"))
file.copy(from = pbf_path, to = file.path(dir_after, "street_network.osm.pbf"))

file.copy(from = tif_path, to = file.path(dir_before, "topography.tif"))
file.copy(from = tif_path, to = file.path(dir_after, "topography.tif"))
```

```{r}
#| echo: false
#| results: false
#| warning: false
files_to_move <- c(
  "network.dat",
  "street_network.osm.pbf.mapdb",
  "street_network.osm.pbf.mapdb.p"
)

file.rename(
  file.path(dir_before, files_to_move),
  file.path(before_tmp, files_to_move)
)

file.rename(
  file.path(dir_after, files_to_move),
  file.path(after_tmp, files_to_move)
)
```

```{r}
fs::dir_tree(analysis_dir)
```

```{r}
#| echo: false
#| results: false
#| warning: false
file.rename(
  file.path(before_tmp, files_to_move),
  file.path(dir_before, files_to_move)
)

file.rename(
  file.path(after_tmp, files_to_move),
  file.path(dir_after, files_to_move)
)
```

Finalmente, podemos começar o cálculo das matrizes. A primeira etapa é construir a rede de transporte multimodal usada pelo `{r5r}` no roteamento e criar uma conexão com o `R5`, o que é feito com o comando `setup_r5()`:

```{r}
#| message: false
#| warning: false
options(java.parameters = "-Xmx4G")

library(r5r)

r5r_core_before <- setup_r5(dir_before, verbose = FALSE)
r5r_core_after <- setup_r5(dir_after, verbose = FALSE)
```

<!-- Tendo sido criada a conexão com o `R5` para os dois cenários, prosseguimos agora para o cálculo da matriz, de fato. De forma a avaliar a hipotética política adequadamente, nós precisamos usar os mesmos parâmetros em ambos os cenários. Vamos considerar viagens a pé ou por transporte público, permitir até 800 metros nas pernas de acesso e egresso a paradas e limitar o tempo máximo de viagem em até 60 minutos. Vamos considerar o horário de partida de 14:00 em uma típica segunda-feira de operação. Como origens e destinos, vamos usar os centróides da grade disponibilizada no `r5r`: -->

<!-- ```{r} -->
<!-- library(data.table) -->

<!-- points <- fread(system.file("extdata/spo/spo_hexgrid.csv", package = "r5r")) -->

<!-- before_ttm <- travel_time_matrix( -->
<!--   r5r_core_before, -->
<!--   origins = points, -->
<!--   destinations = points, -->
<!--   mode = c("WALK", "TRANSIT"), -->
<!--   departure_datetime = as.POSIXct( -->
<!--     "13-05-2019 14:00:00", -->
<!--     format = "%d-%m-%Y %H:%M:%S" -->
<!--   ), -->
<!--   max_walk_dist = 800, -->
<!--   max_trip_duration = 120, -->
<!--   verbose = FALSE, -->
<!--   progress = FALSE -->
<!-- ) -->

<!-- after_ttm <- travel_time_matrix( -->
<!--   r5r_core_after, -->
<!--   origins = points, -->
<!--   destinations = points, -->
<!--   mode = c("WALK", "TRANSIT"), -->
<!--   departure_datetime = as.POSIXct( -->
<!--     "13-05-2019 14:00:00", -->
<!--     format = "%d-%m-%Y %H:%M:%S" -->
<!--   ), -->
<!--   max_walk_dist = 800, -->
<!--   max_trip_duration = 120, -->
<!--   verbose = FALSE, -->
<!--   progress = FALSE -->
<!-- ) -->

<!-- before_ttm -->

<!-- after_ttm -->
<!-- ``` -->

<!-- Como podemos ver, alguns tempos de viagem do cenário pós aumento das frequências são menores do que antes da mudança. Maior frequência de transporte público leva a menores tempos de espera nas paradas de embarque e em eventuais transferências, o que leva a menores tempos de viagem. Muitos tempos, no entanto, são iguais nos dois cenários. Isto é uma provável evidência de que as viagens nesses casos são feitas a pé, e, consequentemente, não são afetadas por mudanças no transporte público. -->

<!-- ## Cálculo da acessibilidade nos cenários antes e depois -->

<!-- O cálculo da acessibilidade é muito simples, requerendo apenas um processamento básico dos nossos dados e a aplicação de uma das funções de acessibilidade do pacote `{accessibility}`. Como tratamento dos dados, vamos juntar as matrizes dos dois cenários em uma única tabela, identificando cada cenário com a coluna `scenario`: -->

<!-- ```{r} -->
<!-- ttm <- rbind(before_ttm, after_ttm, idcol = "scenario") -->
<!-- ttm[, scenario := factor(scenario, labels = c("before", "after"))] -->

<!-- ttm -->
<!-- ``` -->

<!-- Para o cálculo da acessibilidade, vamos precisar de uma tabela com os dados de uso do solo da cidade de São Paulo. Para isso, nós usamos a função `read_landuse()` do pacote `{aopdata}` (mais detalhes sobre o pacote são apresentados na [Seção 5](s5_dados_aop.qmd)): -->

<!-- ```{r} -->
<!-- #| message: false -->
<!-- library(aopdata) -->

<!-- sp_data <- read_landuse("spo", showProgress = FALSE) -->
<!-- ``` -->

<!-- Para fins de demonstração, vamos calcular a acessibilidade a postos de trabalho e a escolas públicas na nossa área de estudo. Os dados do total de empregos e escolas em cada hexágono estão listados nas colunas `T001` e `E001`, respectivamente. Vamos renomeá-las para facilitar sua identificação e manter apenas as colunas necessárias na tabela de dados de uso do solo (vamos manter também as colunas `P001`, de população total em cada hexágono, e `R003`, do decil de renda em que cada hexágono se encontra, que serão úteis mais à frente): -->

<!-- ```{r} -->
<!-- cols_to_keep <- c("id", "jobs", "schools", "population", "decile") -->

<!-- setnames( -->
<!--   sp_data, -->
<!--   old = c("id_hex", "T001", "E001", "P001", "R003"), -->
<!--   new = cols_to_keep -->
<!-- ) -->
<!-- sp_data[, setdiff(names(sp_data), cols_to_keep) := NULL] -->

<!-- sp_data -->
<!-- ``` -->

<!-- A parte mais difícil do processo do cálculo de acessibilidade é a definição da medida a ser utilizada. É extremamente importante pesar as vantagens e desvantagens de cada uma e compreender quais medidas se adequam às oportunidades para quais se deseja calcular os níveis de acessibilidade. Neste exemplo, utilizaremos duas medidas distintas: -->

<!-- - No cálculo da acessibilidade a empregos, vamos usar a medida de oportunidades cumulativas. Esta métrica nos permite entender quantos empregos são acessíveis dentro de um determinado custo de viagem, representando, desta forma, a oferta de empregos aos habitantes de cada uma das células de nossa grade. Embora essa medida não leve em consideração a competição por empregos, sua principal vantagem é que ela é de muito simples comunicação e interpretação. Em nosso exemplo, vamos tomar como limite de custo um tempo de viagem de 30 minutos. -->

<!-- - No cálculo da acessibilidade a escolas públicas, vamos usar a medida de custo mínimo de viagem. Esta métrica é especialmente útil para avaliar a cobertura de serviços públicos essenciais, como educação e saúde básica, pois é desejado que a maior parte da população de uma cidade esteja a uma distância considerada razoável desses serviços. -->

<!-- Como mostrado anteriormente, na @sec-accessibility, o cálculo dessas medidas pode ser feito com as funções `cumulative_cutoff()` e `cost_to_closest()`, respectivamente, do pacote `{accessibility}`: -->

<!-- ```{r} -->
<!-- library(accessibility) -->

<!-- setnames(ttm, old = c("fromId", "toId"), new = c("from_id", "to_id")) -->

<!-- access_to_jobs <- cumulative_cutoff( -->
<!--   travel_matrix = ttm, -->
<!--   land_use_data = sp_data, -->
<!--   opportunity = "jobs", -->
<!--   travel_cost = "travel_time", -->
<!--   cutoff = 30, -->
<!--   group_by = "scenario" -->
<!-- ) -->
<!-- access_to_jobs -->

<!-- time_to_schools <- cost_to_closest( -->
<!--   travel_matrix = ttm, -->
<!--   land_use_data = sp_data, -->
<!--   opportunity = "schools", -->
<!--   travel_cost = "travel_time", -->
<!--   group_by = "scenario" -->
<!-- ) -->
<!-- time_to_schools -->
<!-- ``` -->

<!-- Como podemos ver, o resultado da função de custo mínimo de viagem inclui alguns valores `Inf`. As origens listadas com este valor não conseguem alcançar dentro de 120 minutos (limite de tempo de viagem imposto no cálculo da matriz) nenhum destino em que está localizada ao menos uma escola pública. O valor `Inf`, portanto, é utilizado para sinalizar esta condição. -->

<!-- ## Análise dos níveis de acessibilidade antes e depois -->

<!-- Agora que calculamos os níveis de acessibilidade em cada cenário, precisamos compreender como as mudanças na frequência das linhas de transporte público afetaram as condições de acessibilidade em nossa área de estudo. Uma boa forma de entender isso é olhando para a distribuição espacial dos níveis de acessibilidade. Vamos usar o pacote `{aopdata}` para baixar as informações espaciais da nossa área de estudo e juntá-las às nossas tabelas de acessibilidade:  -->

<!-- ```{r} -->
<!-- sp_grid <- read_grid("spo") -->
<!-- setDT(sp_grid) -->

<!-- access_to_jobs[sp_grid, on = c(id = "id_hex"), geom := i.geom] -->
<!-- time_to_schools[sp_grid, on = c(id = "id_hex"), geom := i.geom] -->
<!-- ``` -->

<!-- Feito isso, apresentamos os resultados em formato de mapa: -->

<!-- ```{r} -->
<!-- #| message: false -->
<!-- library(ggplot2) -->
<!-- library(sf) -->

<!-- access_to_jobs_sf <- st_sf(access_to_jobs) -->

<!-- ggplot(access_to_jobs_sf) + -->
<!--   geom_sf(aes(fill = jobs)) + -->
<!--   facet_wrap(~ scenario, nrow = 1) + -->
<!--   scale_fill_viridis_c( -->
<!--     option = "inferno", -->
<!--     label = scales::label_number(scale = 1/1000, suffix = "k") -->
<!--   ) -->

<!-- time_to_schools_sf <- st_sf(time_to_schools) -->

<!-- ggplot(time_to_schools_sf) + -->
<!--   geom_sf(aes(fill = travel_time)) + -->
<!--   facet_wrap(~ scenario, nrow = 1) + -->
<!--   scale_fill_viridis_c(option = "cividis", direction = -1) -->
<!-- ``` -->

<!-- Como podemos ver, o aumento da frequência das linhas levou a um aumento significativo da acessibilidade em grande parte da nossa área de estudo. No entanto, embora os mapas acima sejam bons para mostrar os impactos espaciais da nossa política hipotética, eles não comunicam efetivamente o impacto médio da política à população. Para facilitar a comunicação dos nossos resultados, portanto, vamos calcular o nível médio da acessibilidade em cada um dos cenários: -->

<!-- ```{r} -->
<!-- access_to_jobs[sp_data, on = "id", population := i.population] -->
<!-- avg_access_to_jobs <- access_to_jobs[ -->
<!--   , -->
<!--   .(avg_access = weighted.mean(jobs, w = population)), -->
<!--   by = scenario -->
<!-- ] -->

<!-- ggplot(avg_access_to_jobs) + geom_col(aes(scenario, avg_access)) -->

<!-- time_to_schools[sp_data, on = "id", population := i.population] -->
<!-- time_to_schools[ -->
<!--   , -->
<!--   treated_travel_time := ifelse(is.infinite(travel_time), 120, travel_time) -->
<!-- ] -->
<!-- avg_time_to_schools <- time_to_schools[ -->
<!--   , -->
<!--   .(avg_time = weighted.mean(treated_travel_time, w = population)), -->
<!--   by = scenario -->
<!-- ] -->

<!-- ggplot(avg_time_to_schools) + geom_col(aes(scenario, avg_time)) -->
<!-- ``` -->

<!-- Como é de se esperar, o aumento da frequência de linhas de metrô e trem resulta no aumento da acessibilidade média da população de São Paulo. Essas linhas, entretanto, não estão igualmente distribuídas no território: algumas pessoas têm acesso mais fácil às suas estações do que outras. Assim, a facilidade de acesso a elas, e consequentemente do acesso a oportunidades de emprego e educação, depende de onde cada pessoa reside - o que, por sua vez, está muito relacionado a características socioeconômicas como classe e raça. O gráfico abaixo explora a distribuição de empregos acessíveis e de tempo até a escola mais próxima por decil de renda: -->

<!-- ```{r} -->
<!-- sp_data[, decile := factor(decile)] -->
<!-- access_to_jobs[sp_data, on = "id", decile := i.decile] -->

<!-- ggplot(access_to_jobs[!is.na(decile)]) + -->
<!--   geom_boxplot(aes(decile, jobs, weight = population, group = decile)) + -->
<!--   facet_wrap(~ scenario, nrow = 1) -->

<!-- time_to_schools[sp_data, on = "id", decile := i.decile] -->

<!-- ggplot(time_to_schools[!is.na(decile)]) + -->
<!--   geom_boxplot( -->
<!--     aes(decile, treated_travel_time, weight = population, group = decile) -->
<!--   ) + -->
<!--   facet_wrap(~ scenario, nrow = 1) -->
<!-- ``` -->

