#  Comparando a acessibilidade entre dois cenários de transporte

Neste capítulo, nós vamos ilustrar como usar a metodologia ensinada nos capítulos anteriores para medir impacto de projetos de transporte sobre acessibilidade urbana. Como estudo de caso, vamos fazer uma avaliação do projeto de expansão da Linha Leste do metrô de Fortaleza (@fig-fortaleza_1). O traçado da Linha Leste possui 7.3 km de extensão e liga o Centro de Fortaleza ao bairro Papicu, permitindo a integração das linhas de metrô Sul e Oeste com corredores de Veículo Leve sobre Trilhos (VLT) e o terminal de ônibus no Papicu (@fig-fortaleza_2) No momento em que esse livro foi escrito, o metrô ainda estava em fase de construção. Portanto, estamos tratando de uma avaliação *ex-ante* em que avaliamos o futuro impacto que esta expansão de infraestrutura deverá ter sobre a acessibilidade urbana da cidade.

```{r}
#| echo: false
#| label: fig-fortaleza_1
#| fig-cap: Sistema de transporte urbano de média e alta capacidade de Fortaleza

knitr::include_graphics("images/fortaleza_1.png")
```
Fonte: @braga2022impactos

```{r}
#| echo: false
#| label: fig-fortaleza_2
#| fig-cap: Detalhamento da futura Linha Leste do metrô de Fortaleza

knitr::include_graphics("images/fortaleza_2.png")
```
Fonte: @braga2022impactos


É importante notar que, na prática, a implementação deste investimento também deverá envolver mudanças nas frequências das linhas de metrô Sul e Oeste, além do racionamento do sistema de ônibus municipais, conforme o Plano de Acessibilidade Sustentável de Fortaleza (Pasfor)[^1]. Essas mudanças adicionais no sistema de transporte público não foram incorporadas aos nossos cenários. Portanto, o estudo de caso que apresentamos aqui considera um cenário simplificado que considera apenas a implementação da Linha Leste. Para uma avaliação mais completa do impacto de acessibilidade da implementação da Linha Leste e das mudanças previstas no Pasfor, por favor veja @braga2022impactos.

[^1]: Disponível em <https://www.pasfor.com.br/>.

Para a avaliação de impacto da Linha Leste do metrô, nós precisaremos comparar os níveis de acessibilidade antes e depois da implementação do novo corredor. Precisamos, portanto, utilizar diferentes arquivos GTFS para representar os cenários antes e depois, e seguir os seguintes passos:
1. Calcular duas matrizes de tempo de viagem, uma antes e outra depois do investimento
2. Calcular dois cenários de acessibilidade, um antes e outro depois do investimento 
3. Comparar esses as condições de acessibilidade nos cenários antes e depois, examinando como os impactos de acessibilidade se distribuem espacialmente e entre populações de diferentes níveis socioeconômicos.

Neste capítulo, vamos cobrir este passo-a-passo em detalhes, começando primeiro pelo detalhamento dos dados de transporte público em formato GTFS que vamos usar.



## Dados de GTFS usados na análise

Nesta análise, usaremos os arquivos GTFS disponibilizados pela Empresa de Transporte Urbano de Fortaleza (Etufor) e a Empresa do Metrô de Fortaleza (Metrofor). Esses dados descrevem o sistema de transporte público operante na cidade de Fortaleza em outubro de 2019. Como esses são arquivos grandes, somando quase 20 MB no total, eles não estão disponíveis dentro dos pacotes `{r5r}` e `{gtfstools}`, como nos exemplos que usamos até aqui no livro. Para baixar esses dados, nós usamos o código abaixo, que faz o *download* dos *feeds* de GTFS para arquivos temporários usando a função o pacote `{httr}`:

```{r}
#| results: false
library(httr)

# criar o endereço de arquivos temporários na máquina local
metrofor_path <- tempfile("metrofor", fileext = ".zip")
etufor_path <- tempfile("etufor", fileext = ".zip")

# download dados da metrofor
httr::GET(
  "https://github.com/ipeaGIT/intro_access_book/releases/download/data_1st_edition/gtfs_for_metrofor_2021-01.zip",
  httr::write_disk(metrofor_path)
)

# download dados da etufor
httr::GET(
  "https://github.com/ipeaGIT/intro_access_book/releases/download/data_1st_edition/gtfs_for_etufor_2019-10.zip",
  httr::progress(),
  httr::write_disk(etufor_path)
)
```

Para simularmos a operação da nova Linha Leste do metrô, precisamos também de um *feed* que descreva como deverá ser a operação deste corredor quando ele entrar em operação. Este *feed* deve conter algumas informações-chave, como por exemplo o traçado da futura linha de metrô, a localização de suas estações, a velocidade operacional do metrô e a frequência planejada dos serviços. No exemplo que vamos apresentar neste livro, nós vamos utilizar o GTFS do projeto da Linha Leste que foi criado anteriormente pelo Ipea para um estudo mais detalhado de avaliação do impacto de acessibilidade deste projeto [@braga2022impactos]. Assim como os *feeds* da ETUFOR e da METROFOR, este arquivo GTFS está disponível para *download* no repositório do livro no GitHub, e pode ser baixado com o código:

```{r}
#| results: false
# criar o endereço do arquivo temporário
linha_leste_path <- tempfile("linha_leste", fileext = ".zip")

# download do GTFS da Linha Leste
httr::GET(
  "https://github.com/ipeaGIT/intro_access_book/releases/download/data_1st_edition/gtfs_linha_leste.zip", 
  httr::write_disk(linha_leste_path)
)
```

Esses três arquivos GTFS serão usados em conjunto para calcular as condições de acessibilidade de Fortaleza em 2019 (antes da implementação do projeto do metrô) e para o cenário futuro quando a Linha Leste estiver funcionando. Para a análise de 2019, nós vamos calcular as matrizes de tempo de viagem com base apenas nos *feeds* da METROFOR e da ETUFOR de outubro de 2019, que representam a típica operação de transporte público da cidade antes da implementação do novo corredor. No cenário pós-implementação, incluiremos também o GTFS da Linha Leste, incorporando à análise a operação planejada desta linha após sua finalização.


## Cálculo das matrizes de tempo de viagem

Tendo definido quais dados de GTFS vamos usar em cada um dos cenários analisados do transporte público, o próximo passo é calcular as matrizes de tempo de viagem, que posteriormente serão utilizadas para estimar os níveis de acessibilidade. Para isso, nós vamos utilizar a função `travel_time_matrix()` do pacote `{r5r}`, como apresentado anteriormente na @sec-matrix.

Antes de calcular as matrizes de fato, nós precisamos organizar os nossos arquivos na estrutura que o `{r5r}` requer. Com o código abaixo, nós vamos criar uma pasta separada para cada um dos nossos cenários (antes e depois), e vamos salvar nessas pastas os arquivos de dados necessários para o roteamento. Primeiro, vamos criar uma pasta raíz chamada `analysis_dir`:

```{r}
#| warning: false
# cria pasta raíz da análise de dados
analysis_dir <- "impact_analysis"

dir.create(analysis_dir)
```

Dentro desta pasta raiz, vamos criar agora as pastas de roteamento dos cenários antes e depois (`dir_before` e `dir_after`), contendo seus respectivos *feeds*:

```{r}
#| results: false
#| warning: false
# criando pasta dos cenários
dir_before <- file.path(analysis_dir, "before")
dir_after <- file.path(analysis_dir, "after")

dir.create(dir_before)
dir.create(dir_after)

# copiando os arquivos de GTFS para as pastas dos cenários antes e depois
file.copy(from = metrofor_path, to = file.path(dir_before, "metrofor.zip"))
file.copy(from = metrofor_path, to = file.path(dir_after, "metrofor.zip"))

file.copy(from = etufor_path, to = file.path(dir_before, "etufor.zip"))
file.copy(from = etufor_path, to = file.path(dir_after, "etufor.zip"))

file.copy(from = linha_leste_path, to = file.path(dir_after, "linha_leste.zip"))

# visualizando esquema de arquivos na pasta
fs::dir_tree(analysis_dir)
```

```{r}
#| echo: false
#| results: false
#| warning: false

# this line below should be enough, but it's not due to a {fs} bug:
#  https://github.com/r-lib/fs/issues/398
fs::dir_tree(analysis_dir, glob = "*.zip")

# so instead we're always moving the files that should not appear in the file
# listing below to a tempdir and then moving them back to their original dir
files_to_move <- c(
  "network.dat",
  "street_network.osm.pbf.mapdb",
  "street_network.osm.pbf.mapdb.p",
  "street_network.osm.pbf",
  "topography.tif"
)

before_tmp <- tempfile("before")
dir.create(before_tmp)
file.rename(
  file.path(dir_before, files_to_move),
  file.path(before_tmp, files_to_move)
)

after_tmp <- tempfile("after")
dir.create(after_tmp)
file.rename(
  file.path(dir_after, files_to_move),
  file.path(after_tmp, files_to_move)
)
```

```{r}
#| echo: false
fs::dir_tree(analysis_dir)
```

```{r}
#| echo: false
#| results: false
#| warning: false
file.rename(
  file.path(before_tmp, files_to_move),
  file.path(dir_before, files_to_move)
)

file.rename(
  file.path(after_tmp, files_to_move),
  file.path(dir_after, files_to_move)
)
```

Para estimarmos o tempo de viagem na nossa área de estudo, nós precisamos também de um arquivo com os dados do *OpenStreetMap* representando a rede viária local em formato `.pbf`. E opcionalmente iremos utilizar também um arquivo representando a topografia local, em formato `.tif`. Esses arquivos, assim como os GTFS, estão disponíveis para *download* no repositório do livro. Partindo do pressuposto que a implementação da Linha Leste não afetaria o traçado das ruas e calçadas na região, bem como a topografia local, podemos usar os mesmos arquivos nas duas matrizes de tempo de viagem. No bloco de código seguinte, nós baixamos esses dados e copiamos esses arquivos para as pastas dos dois cenários de transporte.

```{r}
#| results: false
# cria endereço temporário dos arquivos na máquina local
pbf_path <- tempfile("street_network", fileext = ".osm.pbf")
tif_path <- tempfile("topography", fileext = ".tif")

# download dos dados de OSM
httr::GET(
  "https://github.com/ipeaGIT/intro_access_book/releases/download/data_1st_edition/for_2020.osm.pbf",
  httr::write_disk(pbf_path)
)

# download dos dados de topografia
httr::GET(
  "https://github.com/ipeaGIT/intro_access_book/releases/download/data_1st_edition/topografia3_for.tif",
  httr::write_disk(tif_path)
)

# copia arquivo para as pastas dos cenários antes e depois
file.copy(from = pbf_path, to = file.path(dir_before, "street_network.osm.pbf"))
file.copy(from = pbf_path, to = file.path(dir_after, "street_network.osm.pbf"))

file.copy(from = tif_path, to = file.path(dir_before, "topography.tif"))
file.copy(from = tif_path, to = file.path(dir_after, "topography.tif"))
```

```{r}
#| echo: false
#| results: false
#| warning: false
files_to_move <- c(
  "network.dat",
  "street_network.osm.pbf.mapdb",
  "street_network.osm.pbf.mapdb.p"
)

file.rename(
  file.path(dir_before, files_to_move),
  file.path(before_tmp, files_to_move)
)

file.rename(
  file.path(dir_after, files_to_move),
  file.path(after_tmp, files_to_move)
)
```

```{r}
# visualizando esquema de arquivos na pasta
fs::dir_tree(analysis_dir)
```

```{r}
#| echo: false
#| results: false
#| warning: false
file.rename(
  file.path(before_tmp, files_to_move),
  file.path(dir_before, files_to_move)
)

file.rename(
  file.path(after_tmp, files_to_move),
  file.path(dir_after, files_to_move)
)
```

Agora com os dados organizados nas pastas, podemos começar o cálculo das matrizes de tempo de viagem. A primeira etapa é construir a rede de transporte multimodal usada pelo `{r5r}` no roteamento, o que é feito com o comando `setup_r5()`. Essa rede de transporte multimodal é criada por esta função que combina os dados da malha de ruas, do sistema de transporte público e de topografia. Essa função também retorna uma  conexão com o `R5` que aqui nós chamamos de `r5r_core_`. No exemplo abaixo, nós vamos criar duas redes, uma para cada cenário:

```{r}
#| message: false
#| warning: false
# aloca memória disponível para Java
options(java.parameters = "-Xmx4G")

# carrega biblioteca
library(r5r)

# cria rede de transporte multimodal de cada cenário
r5r_core_before <- setup_r5(dir_before, use_elevation = TRUE, verbose = FALSE)
r5r_core_after <- setup_r5(dir_after, use_elevation = TRUE, verbose = FALSE)

```

Com as redes de transporte criadas para cada cenário, prosseguimos agora para o cálculo das matrizes de tempo de viagem. Nesta etapa nós vamos utilizar como origens e destinos os centróides de uma grade espacial de hexágonos de Fortaleza disponibilizada pelo pacote `{aopdata}` (mais detalhes sobre o pacote são apresentados na [Seção 5](s5_dados_aop.qmd)). Na grade espacial utilizada, cada hexágono tem uma área de aproximadamente  0.10 Km<sub>2</sub>, o que permite uma análise espacial bem detalhada.

Para comparar os dois cenários, nós vamos calcular quanto tempo uma pessoa demoraria para viajar partindo de cada origem para todos os destinos considerando os mesmos parâmetros de viagem. Aqui, nós vamos considerar viagens a pé ou por transporte público, considerar que as pessoas iriam caminhar no máximo até 800 metros nas pernas de acesso e egresso das paradas de transporte público, e limitar o tempo máximo de viagem em até 60 minutos. Vamos considerar o horário de partida de 07:00 em uma típica segunda-feira de operação:

```{r}
#| message: false
#| warning: false
# carrega bibliotecas
library(data.table)
library(aopdata)
library(sf)

# leitura dos dados da grade espacial
for_grid <- read_grid(city = "Fortaleza", showProgress = TRUE)

# geração dos centroids das células espaciais
points <- st_centroid(for_grid)

# renomeia o nome da coluna com id das células
names(points)[1] <- 'id'

# calcula matriz de tempo de viagem do cenário 'antes'
ttm_before <- travel_time_matrix(
  r5r_core_before,
  origins = points,
  destinations = points,
  mode = c("WALK", "TRANSIT"),
  departure_datetime = as.POSIXct(
    "02-03-2020 07:00:00",
    format = "%d-%m-%Y %H:%M:%S"
  ),
  max_walk_dist = 800,
  max_trip_duration = 60,
  verbose = FALSE,
  progress = FALSE
)

# calcula matriz de tempo de viagem do cenário 'depois'
ttm_after <- travel_time_matrix(
  r5r_core_after,
  origins = points,
  destinations = points,
  mode = c("WALK", "TRANSIT"),
  departure_datetime = as.POSIXct(
    "02-03-2020 07:00:00",
    format = "%d-%m-%Y %H:%M:%S"
  ),
  max_walk_dist = 800,
  max_trip_duration = 60,
  verbose = FALSE,
  progress = FALSE
)

head(ttm_before)

head(ttm_after)
```

```{r}
#| results: false
#| message: false
#| echo: false
stop_r5()
```

À primeira vista, nossas matrizes parecem iguais: todos os tempos de viagem na amostra de pares mostrados acima são idênticos. Isto ocorre porque o projeto de expansão do metrô fica restrito à uma área relativamente pequena no centro da cidade de Fortaleza. Assim, muitos deslocamentos entre regiões da cidade de fato não devem ser afetados pela implementação da nova linha de metrô. Para diversos pares de origem-destino, no entanto, vemos que os tempos de viagens entre eles deverão ser impactados pela Linha Leste:

```{r}
# merge dos tempos de viagem dos dois cenários
comparison <- merge(
  ttm_before,
  ttm_after,
  by = c("fromId", "toId"),
  suffixes = c("_before", "_after")
)

# mostrar apenas os pares OD que deverão ter queda nos tempos de viagem
comparison[travel_time_after < travel_time_before]
```

## Cálculo da acessibilidade nos cenários antes e depois

O cálculo da acessibilidade é muito simples, e requer apenas um processamento básico dos nossos dados e a aplicação de uma das funções que calcula indicadores de acessibilidade do pacote `{accessibility}`. Para facilitar o tratamento dos dados, nós vamos empilhar as matrizes de tempo de viagem dos dois cenários em uma única tabela, identificando cada cenário com a coluna `scenario`:

```{r}
# empilhando matrizes de tempo de viagem antes e depois
ttm <- rbind(ttm_before, ttm_after, idcol = "scenario")
ttm[, scenario := factor(scenario, labels = c("antes", "depois"))]

ttm

```

Para o cálculo da acessibilidade, vamos precisar de uma tabela com os dados de uso do solo da cidade de Fortaleza. Para isso, nós usamos a função `read_landuse()` do pacote `{aopdata}`, que  traz a informação com a quantidade de população, e oportunidades de empregos e escolas em cada hexágono da cidade.

```{r}
#| message: false
# download dados de uso do solo
for_data <- read_landuse(city = "Fortaleza", showProgress = FALSE)
```

Para fins de demonstração, vamos calcular a acessibilidade a postos de trabalho e a escolas públicas de ensino médio na nossa área de estudo. Os dados do total de empregos e escolas em cada hexágono estão listados nas colunas `T001` e `E004`, respectivamente. Vamos renomeá-las para facilitar sua identificação e manter apenas as colunas necessárias na tabela de dados de uso do solo. Também vamos manter também as colunas `P001`, de população total em cada hexágono, e `R003`, do decil de renda em que cada hexágono se encontra, que serão úteis mais à frente:

```{r}
# nome das colunas a serem mantidas
cols_to_keep <- c("id", "jobs", "schools", "population", "decile")

# renomeando colunas
setnames(
  for_data,
  old = c("id_hex", "T001", "E004", "P001", "R003"),
  new = cols_to_keep
)

# deletando demais colunas que não vamos usar
for_data[, setdiff(names(for_data), cols_to_keep) := NULL]

for_data
```

Uma decisão-chave no cálculo de acessibilidade é a escolha da medida a ser utilizada. É extremamente importante pesar as vantagens e desvantagens de cada medida e compreender quais indicadores se adequam às oportunidades para quais se deseja calcular os níveis de acessibilidade. Neste exemplo, utilizaremos duas medidas distintas:

- No cálculo da **acessibilidade a empregos**, vamos usar a medida de oportunidades cumulativas. Esta métrica nos permite entender quantos empregos são acessíveis dentro de um determinado custo de viagem, representando, desta forma, a oferta de empregos aos habitantes de cada uma das células de nossa grade. Embora essa medida não leve em consideração a competição por empregos, sua principal vantagem é que ela é de muito simples comunicação e interpretação. Em nosso exemplo, vamos tomar como limite de custo um tempo de viagem de 60 minutos, que é muito próximo do tempo médio de deslocamento casa-trabalho por transporte público de Fortaleza em 2019 (cerca de 58 minutos), conforme o Pasfor[^1].

[^1]: Disponível em <https://www.pasfor.com.br/>.

- No cálculo da acessibilidade a escolas públicas, vamos usar a medida de custo mínimo de viagem. Esta métrica é especialmente útil para avaliar a cobertura de serviços públicos essenciais, como educação e saúde básica. Ela também traz informações que permitem a gente identificar qual parcela da população de uma cidade está a uma distância maior do que seria razoável para acessar esses serviços essenciais.

Como mostrado anteriormente, na @sec-accessibility, o cálculo dessas medidas pode ser feito com as funções `cumulative_cutoff()` e `cost_to_closest()`, respectivamente, do pacote `{accessibility}`:

```{r}
# carrega biblioteca
library(accessibility)

# renomeia colunas
setnames(ttm, old = c("fromId", "toId"), new = c("from_id", "to_id"))

# calcula medida de oportunidades cumulativas
access_to_jobs <- cumulative_cutoff(
  travel_matrix = ttm,
  land_use_data = for_data,
  opportunity = "jobs",
  travel_cost = "travel_time",
  cutoff = 60,
  group_by = "scenario"
)
access_to_jobs

# calcula medida de tempo mínimo de viagem
time_to_schools <- cost_to_closest(
  travel_matrix = ttm,
  land_use_data = for_data,
  opportunity = "schools",
  travel_cost = "travel_time",
  group_by = "scenario"
)
time_to_schools
```

Como podemos ver, o resultado da função de custo mínimo de viagem inclui alguns valores `Inf`. As origens listadas com este valor não conseguem alcançar nenhuma escola pública dentro de 60 minutos (limite de tempo de viagem imposto no cálculo da matriz). O valor `Inf`, portanto, é utilizado para sinalizar esta condição. Para fins de simplicidade, vamos considerar que essas regiões estão a 80 minutos de viagem de uma escola. Assim, nós podemos calcular a diferença de acessibilidade entre os cenários antes e depois da seguinte maneira:

```{r}
# imputa tempo de viagem de 80 min. para valores Inf
time_to_schools[, travel_time := ifelse( is.infinite(travel_time), 80, travel_time)]

# calcula diferença de acessibilidade entre cenários
access_to_jobs[, diff := shift(jobs, type = "lead") - jobs, by = id]
time_to_schools[, diff := shift(travel_time, type = "lead") - travel_time, by = id]
```


## Análise dos níveis de acessibilidade antes e depois

Agora que calculamos os níveis de acessibilidade em cada cenário, precisamos compreender como a futura implementação da Linha Leste do Metrô deverá impactar as condições de acessibilidade em nossa área de estudo. Uma primeira maneira de captar isso é o impacto que expansão deverá ter na acessibilidade média da cidade. Para isso, nós calculamos a quantidade média de empregos acessíveis em cada cenário. Aqui é importante calcular a média de acessibilidade ponderada pela população de cada hexágono.

Os resultados abaixo mostram que, em 2019, a população de Fortaleza conseguia acessar em média `240.663` empregos em até 60 minutos de transporte público. A implementação da nova Linha Leste do metrô deverá aumentar esse valor em 1%, para `243.023` empregos acessíveis em média.


```{r}
# carrega biblioteca de visualização de dados
library(ggplot2)
library(patchwork)

# recupera info da populacao residente e renda nos hexágonos
access_to_jobs[for_data, on = 'id', c('population', 'decile') := list(i.population, i.decile)]

# calcula média ponderada de acessibilidade antes e depois
resultado_medio <- access_to_jobs[population > 0, 
                                  .(avg_access  = weighted.mean(x=jobs, w = as.numeric(population), na.rm=T)), 
                                  by=scenario]

resultado_medio

# figura
ggplot(data = resultado_medio, aes(x = scenario, y = avg_access/1000)) + 
  geom_col() +
  geom_text(aes(label = round(avg_access/1000, 2)), vjust = -0.5) +
  ylab("Empregos acessíveis\n(em milhares)") +
  theme_minimal()
  
```

Analisando-se o tempo de acesso à escola pública de ensino médio mais próxima, nota-se que a Linha Leste deverá ter um resultado quase nulo na média de acessibilidade a essas escolas. 

```{r}
# recupera info da populacao residente nos hexágonos
time_to_schools[for_data, on = 'id', population := i.population]

# calcula média ponderada de acessibilidade antes e depois
resultado_medio <- time_to_schools[population > 0, 
                                  .(avg_access  = weighted.mean(x=travel_time, w = as.numeric(population), na.rm=T)), 
                                  by=scenario]

resultado_medio

# figura
ggplot(data = resultado_medio, aes(x = scenario, y = avg_access)) + 
  geom_col() +
  geom_text(aes(label = round(avg_access, 2)), vjust = -0.5) +
  ylab("Média do tempo até a escola\nmais próxima(em minutos)") +
  theme_minimal()

```

Esse resultado ocorre em grande medida por duas razões. A primeira delas é porque, neste estudo de caso, estamos fazendo uma análise simplificada que considera apenas a construção do projeto da Linha Leste do metrô, e ignora as demais intervenções que deverão acompanhar esta intervenção, como o aumento de frequência das demais linhas de metrô e trens na cidade. A segunda razão de encontrarmos impactos tão baixos, é o fato de que a proposta da Linha Leste consiste numa extensão de trecho relativamente pequeno do metrô. Soma-se a isso o fato de que este projeto é localizado próximo ao centro da cidade, que já era a região de mais alta acessibilidade da cidade em 2019.

Embora tenhamos visto que o impacto médio do projeto deverá ser pequeno, é importante entendermos como esse impacto de acessibilidade varia espacialmente. Para isso, vamos juntar nossas tabelas de estimativas de acessibilidade com a grade espacial da nossa área de estudo, disponível no objeto `for_grid` baixado do pacote `{aopdata}` anteriormente.


```{r}
# traz info espacial para tabelas de acessibilidade
setDT(for_grid)
access_to_jobs[for_grid, on = c(id = "id_hex"), geom := i.geom]
time_to_schools[for_grid, on = c(id = "id_hex"), geom := i.geom]

# converte tabela em objeto espacial
access_to_jobs_sf <- st_sf(access_to_jobs)
time_to_schools_sf <- st_sf(time_to_schools)
```

Feito isso, o código abaixo mostra nos mapas a distribuição espacial dos níveis de acessibilidade nos dois cenários (antes e depois) e a diferênça de acessibilidade entre os dois cenários.

Os ganhos de acessibilidade ao emprego se concentram principalmente próximos às estações do novo corredor e dos corredores já existentes que se ligam a ele. Isto mostra como a implantação de uma infraestrutura de transporte pode impactar não apenas suas imediações, mas também locais mais afastados, graças à conectividade da rede.
```{r}
#| message: false
#| warning: false
# mapas dos cenários antes-e-depois
temp1 <- ggplot(access_to_jobs_sf) +
         geom_sf(aes(fill = jobs), color = NA) +
         facet_wrap(~ scenario, nrow = 1) +
         scale_fill_viridis_c(
           option = "inferno",
           label = scales::label_number(scale = 1/1000)
           ) + 
         labs(fill='Empregos\nacessíveis\n(em milhares)') +
         theme_void()

# mapa da diferença
temp2 <- ggplot(subset(access_to_jobs_sf, diff >=0)) +
         geom_sf(aes(fill = diff), color = NA) +
         scale_fill_viridis_c(
           option = "cividis",
           label = scales::label_number(scale = 1/1000)
         ) + 
         labs(fill='Diferença de\nempregos\nacessíveis\n(em milhares)') +
         theme_void()
# plot
temp1 / temp2
```


Por sua vez, o mapa de diferença no tempo de acesso a escolas (abaixo) apresenta um cenário diferente: praticamente nenhuma região da cidade apresenta melhorias no tempo de acesso. Diferentemente da distribuição de empregos, que tende a seguir critérios econômicos, a distribuição de equipamentos públicos como escolas tende a ser planejada usando critérios de justiça social e equidade, sendo, portanto, mais equilibrada no território. Dessa forma, a construção da Linha Leste na parte central da cidade em nada afeta o tempo de acesso das pessoas que moram em locais afastados desse corredor. Não apenas isso, mas mesmo para as pessoas que moram perto do novo corredor a sua implementação não muda os níveis de acesso a escolas. Isto é um sinal que esta área possui uma boa oferta de escolas e já é bem servida de transporte público, mesmo antes da finalização da Linha Leste.

```{r}
temp1 <- ggplot(time_to_schools_sf) +
         geom_sf(aes(fill = travel_time), color = NA) +
         facet_wrap(~ scenario, nrow = 1) +
         scale_fill_viridis_c(
           option = "viridis", direction = -1) + 
         labs(fill='Tempo até\n a escola\nmaispróxima\n(em minutos)') +
         theme_void()


temp2 <- ggplot(subset(time_to_schools_sf, diff <=0)) +
         geom_sf(aes(fill = diff), color = NA) +
         scale_fill_viridis_c(
           option = "viridis", direction = -1) + 
        labs(fill='Diferença no\ntempo até\n a escola\nmaispróxima\n(em minutos)') +
        theme_void()


temp1 /temp2
```


## Desigualdade de acessibilidade


Políticas que resultam em maiores ganhos de acessibilidade para determinados grupos populacionais em detrimento de outros, como é o caso observado nos níveis de acesso a empregos em Fortaleza, alteram também a distribuição da acessibilidade entre grupos socioeconômicos na cidade. Em outras palavras, políticas que trazem mais benefícios para certas pessoas do que para outras mudam a configuração da desigualdade de acessibilidade.

Nós podemos entender como é a distribuição de níveis de acessibilidade entre grupos socioeconômicos usando um gráfico *box plot* e agrupando a nossa população por decis de renda. Separando a nossa visualização nos cenários antes e depois, compreendemos como a Linha Leste afeta os níveis de acessibilidade de decil de renda:

```{r}
# plot distribuição de acessibilidade por renda
ggplot(access_to_jobs[!is.na(decile)]) +
  geom_boxplot(aes(x=as.factor(decile), y=jobs/1000, color=as.factor(decile),
                   weight = population, group = decile)) +
  facet_wrap(~ scenario, nrow = 1) +
  scale_colour_brewer(palette = 'RdBu') +
  labs(x='Decil de renda', y='empregos acessíveis\n(em milhares)') +
  theme_minimal()

```

Os dois paineis mostram claramente que em Fortaleza as pessoas mais ricas detêm os maiores níveis de acessibilidade ao emprego. Em Fortaleza, assim como na maior parte das grandes cidades brasileiras, os mais ricos tendem a morar próximos às grandes concentrações de emprego da cidade, enquanto os mais pobres tendem a ocupar regiões periféricas. Consequentemente, os níveis de acessibilidade dos mais ricos costuma ser maiores do que os dos mais pobres - não apenas porque moram mais perto dos empregos, mas porque também, geralmente, regiões centrais costumam ser mais bem servidas de transporte público do que as periferias.

Assim como no caso da distribuição espacial da acessibilidade, é muito difícil enxergar diferenças consideráveis nos níveis de acesso entre os cenários antes e depois. Lançando mão do mesmo recurso que fizemos anteriormente, podemos enxergar essas diferenças mais claramente visualizando a distribuição da diferença de acessibilidade entre cada cenário por decil de renda:

```{r}
ggplot(data = access_to_jobs[population > 0]) +
  geom_boxplot(aes(x=as.factor(decile), y=jobs/1000, color=as.factor(decile),
                   weight = population, group = decile)) +
  facet_wrap(~ scenario, nrow = 1) +
  scale_colour_brewer(palette = 'RdBu') +
  labs(x='Decil de renda', y='Empregos acessíveis\n(em milhares)') +
  scale_x_discrete(labels = c("D1 mais\nPobres", paste0("D", 2:9), "D10 mais\nRicos")) +
  theme_minimal()



ggplot(data = access_to_jobs[population > 0 & !is.na(diff)] ) +
  geom_boxplot(aes(x=as.factor(decile), y=diff, color=as.factor(decile),
                   weight = population, group = decile)) +
  scale_colour_brewer(palette = 'RdBu') +
  labs(x='Decil de renda', y='empregos acessíveis\n(em milhares)',
       color = 'Decil de\n renda') +
  scale_x_discrete(labels = c("D1 mais\nPobres", paste0("D", 2:9), "D10 mais\nRicos")) +
  theme_minimal()

```

Como podemos ver, os ganhos de acessibilidade se concentram principalmente entre as camadas médias da população, em especial os decis 5, 6 e 7. No entanto, o hexágono que mostrou maior aumento de acessibilidade aparece como *outlier* do 10º decil, apresentando um ganho de mais de 60000 empregos em relação ao cenário pré-implementação.

Uma forma frequentemente empregada de resumir o panorama da desigualdade de uma determinado local é com o uso de uma medida de desigualdade. Esse tipo de medida busca resumir a distribuição dos níveis de acessibilidade entre grupos populacionais (aqui, decis de renda) em um único indicador que facilite a comunicação dos resultados e que possa ser usado, por exemplo, na elaboração de planos e metas. As medidas de desigualdade mais frequentemente utilizadas na literatura de acessibilidade são a Razão de Palma e o Índice de Gini.

Neste exemplo, vamos calcular a Razão de Palma dos cenários antes e depois. Esta medida é o resultado da divisão da acessibilidade média dos 10% mais ricos pela acessibilidade média dos 40% mais pobres:

$$P = \frac{\overline{A_{tp10}}}{\overline{A_{bt40}}}$$

em que $P$ é a Razão de Palma, $\overline{A_{tp10}}$ é a acessibilidade média dos 10% mais ricos e $\overline{A_{bt40}}$ é a acessibilidade média dos 40% mais pobres.

A principal vantagem da Razao de Palma frente ao Índice de Gini é a sua facilidade de comunicação e interpretação. Valores maiores do que 1 indicam um cenário em que os ricos possuem níveis médios do que os pobres, e valores menores do que 1 a situação inversa. Outra vantagem da Razão de Palma é que ela reflete claramente como a desigualdade varia entre dois grupos de especial interesse para nós: os mais privilegiados e os mais vulneráveis de uma população. O Índice de Gini, por sua vez, estima o quanto uma distribuição desvia de uma distribuição hipotética em que todos possuem o mesmo nível de acesso, mas nada diz sobre as condições socioeconômicos daqueles que detêm os maiores e menores níveis de acessibilidade. Se uma determinada política aumenta os níveis de acessibilidades de pessoas de alta renda que moram em locais de baixa acessibilidade, por exemplo, o Índice de Gini indicaria que houve uma diminuição da desigualdade, mesmo que nenhuma população vulnerável se beneficie dessa política. Esta dificilmente é, entretanto, uma política equitativa. Neste mesmo caso, a Razão de Palma indicaria um aumento da desigualdade, resultado mais alinhado às expectativas.

Analisar a Razão de Palma nos cenários antes e depois, dessa forma, nos permite entender qual o impacto da Linha Leste na desigualdade de acesso a empregos em Fortaleza:

```{r}
richest_access <- access_to_jobs[
  decile == 10,
  .(access = weighted.mean(jobs, w = population)),
  by = scenario
]

poorest_access <- access_to_jobs[
  decile %in% 1:4,
  .(access = weighted.mean(jobs, w = as.numeric(population))),
  by = scenario
]

palma_ratio <- merge(
  richest_access,
  poorest_access,
  by = "scenario",
  suffixes = c("_richest", "_poorest")
)
palma_ratio[, palma := access_richest / access_poorest]

ggplot(palma_ratio) + geom_col(aes(scenario, palma))
```

Como podemos ver, a Razão de Palma sofreu uma ligeira queda entre os cenários pré e pós implementação da Linha Leste. Consequentemente, podemos concluir que a expansão do metrô de Fortaleza seria uma política progressiva neste nosso cenário simplificado, que leva em consideração apenas a construção do novo corredor e ignora ajustes nas frequências de outros corredores e mudanças nas linhas de ônibus da cidade.