#  Comparando a acessibilidade entre dois cenários de transporte

Neste capítulo, avaliaremos o impacto de um cenário simplificado de um investimento de infraestrutura de transporte real: a implementação da Linha Leste do metrô de Fortaleza. O traçado da Linha Leste possui 7.3 km de extensão e liga o Centro de Fortaleza ao bairro Papicu, permitindo a integração das linhas de metrô Sul e Oeste com corredores de VLT e o terminal de ônibus no Papicu. É importante notar que a implementação deste investimento implica também em mudanças nas frequências das linhas de metrô Sul e Oeste e também no racionamento do sistema de ônibus municipais, conforme o Plano de Acessibilidade Sustentável de Fortaleza (Pasfor)[^1]. Essas mudanças adicionais no sistema de transporte público não foram incorporados aos nossos cenários. Para uma avaliação mais completa do impacto de acessibilidade da implementação da Linha Leste e das mudanças previstas no Pasfor, por favor veja @ref.

[^1]: Disponível em <https://www.pasfor.com.br/>.

Para isso, precisaremos comparar os níveis de acessibilidade antes e depois da implementação do novo corredor. Precisamos, portanto, utilizar diferentes arquivos GTFS para representar os cenários antes e depois, calcular duas matrizes de tempo de viagem distintas (uma antes e outra depois do investimento), calcular dois conjuntos de níveis de acessibilidade distintos e comparar esses conjuntos. Neste capítulo, vamos cobrir este passo-a-passo em detalhes, começando primeiro pelo detalhamento dos GTFS que vamos usar.

## Arquivos GTFS usados na análise

Nesta análise, usaremos os arquivos GTFS da METROFOR e da ETUFOR, que descrevem o sistema de transporte público operante na cidade de Fortaleza. Como esses são arquivos grandes, somando quase 20 MB no total, eles não estão disponíveis dentro dos pacotes `{r5r}` e `{gtfstools}`, como até então era o caso das amostras de *feeds* que usamos nos exemplos. Precisamos, portanto, baixá-los para o nosso projeto:

```{r}
#| results: false
metrofor_path <- tempfile("metrofor", fileext = ".zip")
etufor_path <- tempfile("etufor", fileext = ".zip")

httr::GET(
  "https://github.com/ipeaGIT/intro_access_book/releases/download/data_1st_edition/gtfs_for_metrofor_2021-01.zip",
  httr::write_disk(metrofor_path)
)

httr::GET(
  "https://github.com/ipeaGIT/intro_access_book/releases/download/data_1st_edition/gtfs_for_etufor_2019-10.zip",
  httr::write_disk(etufor_path)
)
```

Para simularmos a operação da nova Linha Leste do metrô, precisamos também de um *feed* que descreva o funcionamento deste corredor. Este GTFS foi criado para o estudo de @ref, que avalia o impacto de acessibilidade da implementação da Linha Leste, e será reutilizado neste exemplo. Assim como os *feeds* da ETUFOR e da METROFOR, este arquivo GTFS está disponível para *download* no repositório do livro no GitHub:

```{r}
#| results: false
linha_leste_path <- tempfile("linha_leste", fileext = ".zip")

httr::GET(
  "https://github.com/ipeaGIT/intro_access_book/releases/download/data_1st_edition/gtfs_linha_leste.zip",
  httr::write_disk(linha_leste_path)
)
```

Esses três arquivos GTFS serão usados em conjunto para calcular a acessibilidade dos cenários antes e depois. No primeiro, apenas os *feeds* da METROFOR e da ETUFOR serão usados no roteamento de transporte público, representando a típica operação de transporte público antes da implementação do novo corredor. No cenário pós-implementação, incluiremos também o GTFS da Linha Leste, incorporando à análise a operação planejada desta linha após sua finalização.

## Cálculo das matrizes de tempo de viagem

Tendo definido quais arquivos GTFS vamos usar em cada um dos cenários analisados, precisamos agora utilizá-los para calcular as matrizez de tempo de viagem, que por sua vez vamos usar para estimar os níveis de acessibilidade. Como apresentado na @sec-matrix, para isso vamos utilizar a função `travel_time_matrix()`, do pacote `{r5r}`.

Antes de calcular as matrizes de fato, nós precisamos organizar os nossos arquivos na estrutura que o `{r5r}` requer. Cada um dos nossos cenários (antes e depois) deve ser representado por uma pasta contendo os arquivos necessários para o roteamento. Vamos criar uma pasta dentro da qual vamos botar as pastas do roteamento:

```{r}
#| warning: false
analysis_dir <- "impact_analysis"

dir.create(analysis_dir)
```

Dentro desta pasta, vamos criar as pastas de roteamento dos cenários antes e depois, contendo seus respectivos *feeds*:

```{r}
#| results: false
#| warning: false
dir_before <- file.path(analysis_dir, "before")
dir_after <- file.path(analysis_dir, "after")

dir.create(dir_before)
dir.create(dir_after)

file.copy(from = metrofor_path, to = file.path(dir_before, "metrofor.zip"))
file.copy(from = metrofor_path, to = file.path(dir_after, "metrofor.zip"))

file.copy(from = etufor_path, to = file.path(dir_before, "etufor.zip"))
file.copy(from = etufor_path, to = file.path(dir_after, "etufor.zip"))

file.copy(from = linha_leste_path, to = file.path(dir_after, "linha_leste.zip"))

fs::dir_tree(analysis_dir)
```

```{r}
#| echo: false
#| results: false
#| warning: false

# this line below should be enough, but it's not due to a {fs} bug:
#  https://github.com/r-lib/fs/issues/398
fs::dir_tree(analysis_dir, glob = "*.zip")

# so instead we're always moving the files that should not appear in the file
# listing below to a tempdir and then moving them back to their original dir
files_to_move <- c(
  "network.dat",
  "street_network.osm.pbf.mapdb",
  "street_network.osm.pbf.mapdb.p",
  "street_network.osm.pbf",
  "topography.tif"
)

before_tmp <- tempfile("before")
dir.create(before_tmp)
file.rename(
  file.path(dir_before, files_to_move),
  file.path(before_tmp, files_to_move)
)

after_tmp <- tempfile("after")
dir.create(after_tmp)
file.rename(
  file.path(dir_after, files_to_move),
  file.path(after_tmp, files_to_move)
)
```

```{r}
#| echo: false
fs::dir_tree(analysis_dir)
```

```{r}
#| echo: false
#| results: false
#| warning: false
file.rename(
  file.path(before_tmp, files_to_move),
  file.path(dir_before, files_to_move)
)

file.rename(
  file.path(after_tmp, files_to_move),
  file.path(dir_after, files_to_move)
)
```

Para estimarmos o tempo de viagem na nossa área de estudo, precisamos ainda de um arquivo representando a rede viária do local, em formato `.pbf`, e opcionalmente iremos utilizar um arquivo representando a topografia local, em formato `.tif`. Esses arquivos, asssim como os GTFS, estão disponíveis para *download* no repositório do livro. Partindo do pressuposto que a implementação da Linha Leste não afetaria o traçado das ruas e calçadas na região, bem como a topografia local, podemos usar os mesmos arquivos nas duas matrizes de tempo de viagem:

```{r}
#| results: false
pbf_path <- tempfile("street_network", fileext = ".osm.pbf")
tif_path <- tempfile("topography", fileext = ".tif")

httr::GET(
  "https://github.com/ipeaGIT/intro_access_book/releases/download/data_1st_edition/for_2020.osm.pbf",
  httr::write_disk(pbf_path)
)
httr::GET(
  "https://github.com/ipeaGIT/intro_access_book/releases/download/data_1st_edition/topografia3_for.tif",
  httr::write_disk(tif_path)
)

file.copy(from = pbf_path, to = file.path(dir_before, "street_network.osm.pbf"))
file.copy(from = pbf_path, to = file.path(dir_after, "street_network.osm.pbf"))

file.copy(from = tif_path, to = file.path(dir_before, "topography.tif"))
file.copy(from = tif_path, to = file.path(dir_after, "topography.tif"))
```

```{r}
#| echo: false
#| results: false
#| warning: false
files_to_move <- c(
  "network.dat",
  "street_network.osm.pbf.mapdb",
  "street_network.osm.pbf.mapdb.p"
)

file.rename(
  file.path(dir_before, files_to_move),
  file.path(before_tmp, files_to_move)
)

file.rename(
  file.path(dir_after, files_to_move),
  file.path(after_tmp, files_to_move)
)
```

```{r}
fs::dir_tree(analysis_dir)
```

```{r}
#| echo: false
#| results: false
#| warning: false
file.rename(
  file.path(before_tmp, files_to_move),
  file.path(dir_before, files_to_move)
)

file.rename(
  file.path(after_tmp, files_to_move),
  file.path(dir_after, files_to_move)
)
```

Finalmente, podemos começar o cálculo das matrizes. A primeira etapa é construir a rede de transporte multimodal usada pelo `{r5r}` no roteamento e criar uma conexão com o `R5`, o que é feito com o comando `setup_r5()`:

```{r}
#| message: false
#| warning: false
options(java.parameters = "-Xmx4G")

library(r5r)

r5r_core_before <- setup_r5(dir_before, use_elevation = TRUE, verbose = FALSE)
r5r_core_after <- setup_r5(dir_after, use_elevation = TRUE, verbose = FALSE)
```

Tendo sido criada a conexão com o `R5` para os dois cenários, prosseguimos agora para o cálculo da matriz, de fato. De forma a avaliar a expansão do metrô adequadamente, nós precisamos usar os mesmos parâmetros em ambos os cenários. Vamos considerar viagens a pé ou por transporte público, permitir até 800 metros nas pernas de acesso e egresso a paradas e limitar o tempo máximo de viagem em até 60 minutos. Vamos considerar o horário de partida de 07:00 em uma típica segunda-feira de operação. Como origens e destinos, vamos usar os centróides da grade de Fortaleza disponibilizada pelo pacote `{aopdata}` (mais detalhes sobre o pacote são apresentados na [Seção 5](s5_dados_aop.qmd)):

```{r}
#| message: false
#| warning: false
library(data.table)
library(aopdata)
library(sf)

for_grid <- read_grid("for")
points <- st_centroid(for_grid)

setDT(points)
points <- points[, .(id = id_hex, geom)]
points[, setdiff(names(points), c("id", "geom")) := NULL]
points <- st_sf(points)

ttm_before <- travel_time_matrix(
  r5r_core_before,
  origins = points,
  destinations = points,
  mode = c("WALK", "TRANSIT"),
  departure_datetime = as.POSIXct(
    "02-03-2020 07:00:00",
    format = "%d-%m-%Y %H:%M:%S"
  ),
  max_walk_dist = 800,
  max_trip_duration = 60,
  verbose = FALSE,
  progress = FALSE
)

ttm_after <- travel_time_matrix(
  r5r_core_after,
  origins = points,
  destinations = points,
  mode = c("WALK", "TRANSIT"),
  departure_datetime = as.POSIXct(
    "02-03-2020 07:00:00",
    format = "%d-%m-%Y %H:%M:%S"
  ),
  max_walk_dist = 800,
  max_trip_duration = 60,
  verbose = FALSE,
  progress = FALSE
)

ttm_before

ttm_after
```

```{r}
#| results: false
#| message: false
#| echo: false
stop_r5()
```

À primeira vista, nossas matrizes parecem iguais: todos os tempos de viagem na amostra de pares mostrados acima são idênticos. Isto ocorre porque muitos deslocamentos entre regiões da cidade de fato não são afetados pela implementação da nova linha de metrô, por serem realizados por outros modos de transporte público ou a pé. Se compararmos par a par, no entanto, veremos que vários dos tempos de viagens entre eles são impactados pela Linha Leste:

```{r}
comparison <- merge(
  ttm_before,
  ttm_after,
  by = c("fromId", "toId"),
  suffixes = c("_before", "_after")
)

comparison[travel_time_after < travel_time_before]
```

## Cálculo da acessibilidade nos cenários antes e depois

O cálculo da acessibilidade é muito simples, requerendo apenas um processamento básico dos nossos dados e a aplicação de uma das funções de acessibilidade do pacote `{accessibility}`. Como tratamento dos dados, vamos juntar as matrizes dos dois cenários em uma única tabela, identificando cada cenário com a coluna `scenario`:

```{r}
ttm <- rbind(ttm_before, ttm_after, idcol = "scenario")
ttm[, scenario := factor(scenario, labels = c("before", "after"))]

ttm
```

Para o cálculo da acessibilidade, vamos precisar de uma tabela com os dados de uso do solo da cidade de Fortaleza. Para isso, nós usamos a função `read_landuse()` do pacote `{aopdata}`:

```{r}
#| message: false
for_data <- read_landuse("for", showProgress = FALSE)
```

Para fins de demonstração, vamos calcular a acessibilidade a postos de trabalho e a escolas públicas na nossa área de estudo. Os dados do total de empregos e escolas em cada hexágono estão listados nas colunas `T001` e `E001`, respectivamente. Vamos renomeá-las para facilitar sua identificação e manter apenas as colunas necessárias na tabela de dados de uso do solo (vamos manter também as colunas `P001`, de população total em cada hexágono, e `R003`, do decil de renda em que cada hexágono se encontra, que serão úteis mais à frente):

```{r}
cols_to_keep <- c("id", "jobs", "schools", "population", "decile")

setnames(
  for_data,
  old = c("id_hex", "T001", "E001", "P001", "R003"),
  new = cols_to_keep
)
for_data[, setdiff(names(for_data), cols_to_keep) := NULL]

for_data
```

A parte mais difícil do processo do cálculo de acessibilidade é a definição da medida a ser utilizada. É extremamente importante pesar as vantagens e desvantagens de cada uma e compreender quais medidas se adequam às oportunidades para quais se deseja calcular os níveis de acessibilidade. Neste exemplo, utilizaremos duas medidas distintas:

- No cálculo da acessibilidade a empregos, vamos usar a medida de oportunidades cumulativas. Esta métrica nos permite entender quantos empregos são acessíveis dentro de um determinado custo de viagem, representando, desta forma, a oferta de empregos aos habitantes de cada uma das células de nossa grade. Embora essa medida não leve em consideração a competição por empregos, sua principal vantagem é que ela é de muito simples comunicação e interpretação. Em nosso exemplo, vamos tomar como limite de custo um tempo de viagem de 30 minutos.

- No cálculo da acessibilidade a escolas públicas, vamos usar a medida de custo mínimo de viagem. Esta métrica é especialmente útil para avaliar a cobertura de serviços públicos essenciais, como educação e saúde básica, pois é desejado que a maior parte da população de uma cidade esteja a uma distância considerada razoável desses serviços.

Como mostrado anteriormente, na @sec-accessibility, o cálculo dessas medidas pode ser feito com as funções `cumulative_cutoff()` e `cost_to_closest()`, respectivamente, do pacote `{accessibility}`:

```{r}
library(accessibility)

setnames(ttm, old = c("fromId", "toId"), new = c("from_id", "to_id"))

access_to_jobs <- cumulative_cutoff(
  travel_matrix = ttm,
  land_use_data = for_data,
  opportunity = "jobs",
  travel_cost = "travel_time",
  cutoff = 60,
  group_by = "scenario"
)
access_to_jobs

time_to_schools <- cost_to_closest(
  travel_matrix = ttm,
  land_use_data = for_data,
  opportunity = "schools",
  travel_cost = "travel_time",
  group_by = "scenario"
)
time_to_schools
```

Como podemos ver, o resultado da função de custo mínimo de viagem inclui alguns valores `Inf`. As origens listadas com este valor não conseguem alcançar dentro de 120 minutos (limite de tempo de viagem imposto no cálculo da matriz) nenhum destino em que está localizada ao menos uma escola pública. O valor `Inf`, portanto, é utilizado para sinalizar esta condição.

## Análise dos níveis de acessibilidade antes e depois

Agora que calculamos os níveis de acessibilidade em cada cenário, precisamos compreender como as mudanças na frequência das linhas de transporte público afetaram as condições de acessibilidade em nossa área de estudo. Uma boa forma de entender isso é olhando para a distribuição espacial dos níveis de acessibilidade. Vamos juntar usar as informações espaciais da nossa área de estudo, disponíveis no objeto `for_grid`, baixado do pacote `{aopdata}` anteriormente, às nossas tabelas de acessibilidade:

```{r}
setDT(for_grid)

access_to_jobs[for_grid, on = c(id = "id_hex"), geom := i.geom]
time_to_schools[for_grid, on = c(id = "id_hex"), geom := i.geom]
```

Feito isso, apresentamos os resultados em formato de mapa:

```{r}
#| message: false
#| warning: false
library(ggplot2)

access_to_jobs_sf <- st_sf(access_to_jobs)

ggplot(access_to_jobs_sf) +
  geom_sf(aes(fill = jobs), color = NA) +
  facet_wrap(~ scenario, nrow = 1) +
  scale_fill_viridis_c(
    option = "inferno",
    label = scales::label_number(scale = 1/1000, suffix = "k")
  )

time_to_schools_sf <- st_sf(time_to_schools)

ggplot(time_to_schools_sf) +
  geom_sf(aes(fill = travel_time), color = NA) +
  facet_wrap(~ scenario, nrow = 1) +
  scale_fill_viridis_c(option = "cividis", direction = -1)
```

Como podemos ver, a construção da Linha Leste do metrô de Fortaleza por si só, ignorando as demais intervenções que acompanham esta invervenção, pouco afeta os níveis de acessibilidade na cidade. Isto fica claro quando olhamos para os níveis médios de acessibilidade nos dois cenários, que pouco se alteram:

```{r}
access_to_jobs[for_data, on = "id", population := i.population]
avg_access_to_jobs <- access_to_jobs[
  ,
  .(avg_access = weighted.mean(jobs, w = as.numeric(population))),
  by = scenario
]

ggplot(avg_access_to_jobs) + geom_col(aes(scenario, avg_access))

time_to_schools[for_data, on = "id", population := i.population]
time_to_schools[
  ,
  treated_travel_time := ifelse(is.infinite(travel_time), 120, travel_time)
]
avg_time_to_schools <- time_to_schools[
  ,
  .(avg_time = weighted.mean(treated_travel_time, w = population)),
  by = scenario
]

ggplot(avg_time_to_schools) + geom_col(aes(scenario, avg_time))
```

Neste caso, uma forma de mostrar o impacto da política de forma mais clara é apresentar a distribuição espacial da diferença de acessibilidade entre os dois cenários:

```{r}
access_to_jobs_diff <- dcast(
  access_to_jobs,
  id ~ scenario,
  value.var = "jobs"
)
access_to_jobs_diff[, difference := after - before]
access_to_jobs_diff[for_grid, on = c(id = "id_hex"), geom := i.geom]

ggplot(st_sf(access_to_jobs_diff)) +
  geom_sf(aes(fill = difference), color = NA)

time_to_schools_diff <- dcast(
  time_to_schools,
  id ~ scenario,
  value.var = "travel_time"
)
time_to_schools_diff[, difference := after - before]
time_to_schools_diff[is.nan(difference), difference := 0]
time_to_schools_diff[for_grid, on = c(id = "id_hex"), geom := i.geom]

ggplot(st_sf(time_to_schools_diff)) +
  geom_sf(aes(fill = difference), color = NA)
```

Os ganhos de acessibilidade ao emprego se concentram principalmente próximos às estações do novo corredor e dos corredores já existentes que se ligam a ele. Isto mostra como a implantação de uma infraestrutura de transporte pode impactar não apenas suas imediações, mas também locais mais afastados, graças à conectividade da rede.

Por sua vez, o mapa de diferença no tempo de acesso a escolas apresenta um cenário diferente: nenhuma região da cidade apresenta melhorias no tempo de acesso. Diferentemente da distribuição de empregos, que tende a seguir critérios econômicos e mercadológicos, a distribuição de equipamentos públicos, entre eles escolas públicas, tende a ser planejada usando critérios de justiça social e equidade, sendo, portanto, mais equilibrada no território. Dessa forma, a construção da Linha Leste na parte central da cidade em nada afeta o tempo de acesso das pessoas que moram em locais afastados desse corredor. Não apenas isso, mas mesmo para as pessoas que moram perto do novo corredor a sua implementação não muda os níveis de acesso a escolas. Isto é um sinal que esta área possui uma boa oferta de escolas e já é bem servida de transporte público, mesmo antes da finalização da Linha Leste.

## Desigualdade de acessibilidade

Políticas que resultam em maiores ganhos de acessibilidade para determinados grupos populacionais em detrimento de outros, como é o caso observado nos níveis de acesso a empregos em Fortaleza, alteram também a distribuição da acessibilidade entre grupos socioeconômicos na cidade. Em outras palavras, políticas que trazem mais benefícios para certas pessoas do que para outras mudam a configuração da desigualdade de acessibilidade.

Nós podemos entender como é a distribuição de níveis de acessibilidade entre grupos socioeconômicos usando um gráfico *box plot* e agrupando a nossa população por decis de renda. Separando a nossa visualização nos cenários antes e depois, compreendemos como a Linha Leste afeta os níveis de acessibilidade de decil de renda:

```{r}
for_data[, decile := factor(decile)]
access_to_jobs[for_data, on = "id", decile := i.decile]

ggplot(access_to_jobs[!is.na(decile)]) +
  geom_boxplot(aes(decile, jobs, weight = population, group = decile)) +
  facet_wrap(~ scenario, nrow = 1)
```

Os dois paineis mostram claramente que em Fortaleza as pessoas mais ricas detêm os maiores níveis de acessibilidade ao emprego. Em Fortaleza, assim como na maior parte das grandes cidades brasileiras, os mais ricos tendem a morar próximos às grandes concentrações de emprego da cidade, enquanto os mais pobres tendem a ocupar regiões periféricas. Consequentemente, os níveis de acessibilidade dos mais ricos costuma ser maiores do que os dos mais pobres - não apenas porque moram mais perto dos empregos, mas porque também, geralmente, regiões centrais costumam ser mais bem servidas de transporte público do que as periferias.

Assim como no caso da distribuição espacial da acessibilidade, é muito difícil enxergar diferenças consideráveis nos níveis de acesso entre os cenários antes e depois. Lançando mão do mesmo recurso que fizemos anteriormente, podemos enxergar essas diferenças mais claramente visualizando a distribuição da diferença de acessibilidade entre cada cenário por decil de renda:

```{r}
access_to_jobs_diff[
  for_data,
  on = "id",
  `:=`(
    decile = i.decile,
    population = i.population
  )
]

ggplot(access_to_jobs_diff[!is.na(decile)]) +
  geom_boxplot(aes(decile, difference, weight = population, group = decile))
```

Como podemos ver, os ganhos de acessibilidade se concentram principalmente entre as camadas médias da população, em especial os decis 5, 6 e 7. No entanto, o hexágono que mostrou maior aumento de acessibilidade aparece como *outlier* do 10º decil, apresentando um ganho de mais de 60000 empregos em relação ao cenário pré-implementação.

Uma forma frequentemente empregada de resumir o panorama da desigualdade de uma determinado local é com o uso de uma medida de desigualdade. Esse tipo de medida busca resumir a distribuição dos níveis de acessibilidade entre grupos populacionais (aqui, decis de renda) em um único indicador que facilite a comunicação dos resultados e que possa ser usado, por exemplo, na elaboração de planos e metas. As medidas de desigualdade mais frequentemente utilizadas na literatura de acessibilidade são a Razão de Palma e o Índice de Gini.

Neste exemplo, vamos calcular a Razão de Palma dos cenários antes e depois. Esta medida é o resultado da divisão da acessibilidade média dos 10% mais ricos pela acessibilidade média dos 40% mais pobres:

$$P = \frac{\overline{A_{tp10}}}{\overline{A_{bt40}}}$$

em que $P$ é a Razão de Palma, $\overline{A_{tp10}}$ é a acessibilidade média dos 10% mais ricos e $\overline{A_{bt40}}$ é a acessibilidade média dos 40% mais pobres.

A principal vantagem da Razao de Palma frente ao Índice de Gini é a sua facilidade de comunicação e interpretação. Valores maiores do que 1 indicam um cenário em que os ricos possuem níveis médios do que os pobres, e valores menores do que 1 a situação inversa. Outra vantagem da Razão de Palma é que ela reflete claramente como a desigualdade varia entre dois grupos de especial interesse para nós: os mais privilegiados e os mais vulneráveis de uma população. O Índice de Gini, por sua vez, estima o quanto uma distribuição desvia de uma distribuição hipotética em que todos possuem o mesmo nível de acesso, mas nada diz sobre as condições socioeconômicos daqueles que detêm os maiores e menores níveis de acessibilidade. Se uma determinada política aumenta os níveis de acessibilidades de pessoas de alta renda que moram em locais de baixa acessibilidade, por exemplo, o Índice de Gini indicaria que houve uma diminuição da desigualdade, mesmo que nenhuma população vulnerável se beneficie dessa política. Esta dificilmente é, entretanto, uma política equitativa. Neste mesmo caso, a Razão de Palma indicaria um aumento da desigualdade, resultado mais alinhado às expectativas.

Analisar a Razão de Palma nos cenários antes e depois, dessa forma, nos permite entender qual o impacto da Linha Leste na desigualdade de acesso a empregos em Fortaleza:

```{r}
richest_access <- access_to_jobs[
  decile == 10,
  .(access = weighted.mean(jobs, w = population)),
  by = scenario
]

poorest_access <- access_to_jobs[
  decile %in% 1:4,
  .(access = weighted.mean(jobs, w = as.numeric(population))),
  by = scenario
]

palma_ratio <- merge(
  richest_access,
  poorest_access,
  by = "scenario",
  suffixes = c("_richest", "_poorest")
)
palma_ratio[, palma := access_richest / access_poorest]

ggplot(palma_ratio) + geom_col(aes(scenario, palma))
```

Como podemos ver, a Razão de Palma sofreu uma ligeira queda entre os cenários pré e pós implementação da Linha Leste. Consequentemente, podemos concluir que a expansão do metrô de Fortaleza seria uma política progressiva neste nosso cenário simplificado, que leva em consideração apenas a construção do novo corredor e ignora ajustes nas frequências de outros corredores e mudanças nas linhas de ônibus da cidade.