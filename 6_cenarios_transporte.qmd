#  Comparando a acessibilidade entre dois cenários de transporte

Neste capítulo nós avaliaremos o impacto de uma política relativamente simples, mas que pode trazer significativos benefícios em termos de acessibilidade à população: o aumento da frequência das linhas de transporte público.

Para isso, nós precisaremos comparar os níveis de acessibilidade antes e depois da suposta implementação desta política. Precisamos, portanto, modificar o GTFS original da área de estudo para atualizar as frequências das rotas nele descritas, calcular duas matrizes de tempo de viagem distintas (uma antes e outra depois da política), calcular dois conjuntos de níveis de acessibilidade distintos e comparar esse conjunto. Neste capítulo, vamos cobrir este passo-a-passo em detalhes, começando primeiro pela edição do GTFS original.

## Modificação do arquivo GTFS

Nesta análise, nós usaremos novamente a amostra do GTFS da SPTrans, disponível nos pacotes `r5r` e `gtfstools`. Para simularmos um aumento na frequência das viagens de transporte público, nós precisamos diminuir o *headway* de cada viagem. Como este *feed* possui uma tabela `frequencies`, esta edição é particularmente simples: nós precisamos apenas modificar a coluna `headway_secs`. Assumindo uma diminuição de 25% no tempo entre viagens de uma mesma linha, esta manipulação se resume a apenas uma linha de código:

```{r}
library(gtfstools)

path <- system.file("extdata/spo/spo.zip", package = "r5r")

before_gtfs <- read_gtfs(path)
after_gtfs <- read_gtfs(path)

after_gtfs$frequencies[, headway_secs := headway_secs * 0.75]

head(after_gtfs$frequencies)

head(before_gtfs$frequencies)
```

Pronto, isso é tudo que precisamos editar no GTFS para simular o impacto de um possível aumento na frequência das viagens de transporte público. É claro que na vida real uma proposta do tipo deve ser acompanhada de estudos de viabilidade financeira, por exemplo, para atestar sua robustez. Para fins puramente demonstrativos, no entanto, esta pequena edição já satisfaz as nossas necessidades.

## Cálculo das matrizes de tempo de viagem

Tendo feito a modificação necessária no nosso GTFS, nós precisamos agora utilizá-lo para calcular a matriz de tempo de viagem, que por sua vez vamos usar para estimar os níveis de acessibilidade. Como apresentado na @sec-matrix, para isso nós vamos utilizar a função `travel_time_matrix()`, do pacote `r5r`.

Antes de calcular as matrizes de fato, nós precisamos organizar os nossos arquivos na estrutura que o `r5r` requer. Cada um dos nossos cenários (antes e depois) deve ser representado por uma pasta contendo os arquivos necessários para o roteamento. Vamos criar uma pasta temporária dentro da qual vamos botar as pastas do roteamento:

```{r}
tmpdir <- tempfile("impact_analysis")

dir.create(tmpdir)

fs::dir_tree(tmpdir)
```

Dentro desta pasta, vamos criar as nossas pastas de roteamento. Dentro de cada uma elas, por sua vez, vamos salvar os respectivos arquivos GTFS:

```{r}
before_dir <- file.path(tmpdir, "before")
after_dir <- file.path(tmpdir, "after")

dir.create(before_dir)
dir.create(after_dir)

write_gtfs(before_gtfs, path = file.path(before_dir, "before_gtfs.zip"))
write_gtfs(after_gtfs, path = file.path(after_dir, "after_gtfs.zip"))

fs::dir_tree(tmpdir)
```

Para estimarmos o tempo de viagem na nossa área de estudo, precisamos ainda de um arquivo representando a rede viária do local, em formato `.pbf`. Este arquivo também é disponibilizado pelo `r5r`. Partindo do pressuposto que uma maior oferta de transporte público não afetaria o traçado das ruas e calçadas na região, e que, portantom a rede viária permaneceria inalterada entre os dois cenários, podemos usar o mesmo arquivo nas duas matrizes de tempo de viagem:

```{r}
pbf_path <- system.file("extdata/spo/spo_osm.pbf", package = "r5r")

file.copy(from = pbf_path, to = file.path(before_dir, "spo_osm.pbf"))
file.copy(from = pbf_path, to = file.path(after_dir, "spo_osm.pbf"))

fs::dir_tree(tmpdir)
```

Finalmente, podemos começar o cálculo das matrizes. A primeira etapa é construir a rede de transporte multimodal usada pelo `r5r` no roteamento e criar uma conexão com o `R5`, o que é feito com o comando `setup_r5()`:

```{r}
#| message: false
options(java.parameters = "-Xmx2G")

library(r5r)

my_setup_r5 <- function(path) {
  setup_r5(path, verbose = FALSE)
}

before_r5r_core <- my_setup_r5(before_dir)
after_r5r_core <- my_setup_r5(after_dir)
```

Tendo sido criada a conexão com o `R5` para os dois cenários, prosseguimos agora para o cálculo da matriz, de fato. De forma a avaliar a hipotética política adequadamente, nós precisamos usar os mesmos parâmetros em ambos os cenários. Vamos considerar viagens a pé ou por transporte público, permitir até 800 metros nas pernas de acesso e egresso a paradas e limitar o tempo máximo de viagem em até 120 minutos. Vamos considerar o horário de partida de 14:00 em uma típica segunda-feira de operação. Como origens e destinos, vamos usar os centróides da grade disponibilizada no `r5r`:

```{r}
library(data.table)

points <- fread(system.file("extdata/spo/spo_hexgrid.csv", package = "r5r"))

before_ttm <- travel_time_matrix(
  before_r5r_core,
  origins = points,
  destinations = points,
  mode = c("WALK", "TRANSIT"),
  departure_datetime = as.POSIXct(
    "13-05-2019 14:00:00",
    format = "%d-%m-%Y %H:%M:%S"
  ),
  max_walk_dist = 800,
  max_trip_duration = 120,
  verbose = FALSE,
  progress = FALSE
)

after_ttm <- travel_time_matrix(
  after_r5r_core,
  origins = points,
  destinations = points,
  mode = c("WALK", "TRANSIT"),
  departure_datetime = as.POSIXct(
    "13-05-2019 14:00:00",
    format = "%d-%m-%Y %H:%M:%S"
  ),
  max_walk_dist = 800,
  max_trip_duration = 120,
  verbose = FALSE,
  progress = FALSE
)

before_ttm

after_ttm
```

Como podemos ver, alguns tempos de viagem do cenário pós aumento das frequências são menores do que antes da mudança. Maior frequência de transporte público leva a menores tempos de espera nas paradas de embarque e em eventuais transferências, o que leva a menores tempos de viagem. Muitos tempos, no entanto, são iguais nos dois cenários. Isto é uma provável evidência de que as viagens nesses casos são feitas a pé, e, consequentemente, não são afetadas por mudanças no transporte público.

## Cálculo da acessibilidade nos cenários antes e depois

O cálculo da acessibilidade é muito simples, requerendo apenas um processamento básico dos nossos dados e a aplicação de uma das funções de acessibilidade do pacote `{accessibility}`. Como tratamento dos dados, vamos juntar as matrizes dos dois cenários em uma única tabela, identificando cada cenário com a coluna `scenario`:

```{r}
ttm <- rbind(before_ttm, after_ttm, idcol = "scenario")
ttm[, scenario := ifelse(scenario == 1, "before", "after")]

ttm
```

Para o cálculo da acessibilidade, vamos precisar de uma tabela com os dados de uso do solo da cidade de São Paulo. Para isso, nós usamos a função `read_landuse()` do pacote `{aopdata}` (mais detalhes sobre o pacote são apresentados na [Seção 5](s5_dados_aop.qmd)):

```{r}
#| message: false
library(aopdata)

sp_data <- read_landuse("spo", showProgress = FALSE)
```

Para fins de demonstração, vamos calcular a acessibilidade a postos de trabalho e a escolas públicas na nossa área de estudo. Os dados do total de empregos e escolas em cada hexágono estão listados nas colunas `T001` e `E001`, respectivamente. Vamos renomeá-las para facilitar sua identificação e manter apenas as colunas necessárias na tabela de dados de uso do solo:

```{r}
cols_to_keep <- c("id", "jobs", "schools")

setnames(sp_data, old = c("id_hex", "T001", "E001"), new = cols_to_keep)
sp_data[, setdiff(names(sp_data), cols_to_keep) := NULL]

sp_data
```

A parte mais difícil do processo do cálculo de acessibilidade é a definição da medida a ser utilizada. É extremamente importante pesar as vantagens e desvantagens de cada uma e compreender quais medidas se adequam às oportunidades para quais se deseja calcular os níveis de acessibilidade. Neste exemplo, utilizaremos duas medidas distintas:

- No cálculo da acessibilidade a empregos, vamos usar a medida de oportunidades cumulativas. Esta métrica nos permite entender quantos empregos são acessíveis dentro de um determinado custo de viagem, representando, desta forma, a oferta de empregos aos habitantes de cada uma das células de nossa grade. Embora essa medida não leve em consideração a competição por empregos, sua principal vantagem é que ela é de muito simples comunicação e interpretação. Em nosso exemplo, vamos tomar como limite de custo um tempo de viagem de 30 minutos.

- No cálculo da acessibilidade a escolas públicas, vamos usar a medida de custo mínimo de viagem. Esta métrica é especialmente útil para avaliar a cobertura de serviços públicos essenciais, como educação e saúde básica, pois é desejado que a maior parte da população de uma cidade esteja a uma distância considerada razoável desses serviços.

Como mostrado anteriormente, na @sec-accessibility, o cálculo dessas medidas pode ser feito com as funções `cumulative_cutoff()` e `cost_to_closest()`, respectivamente, do pacote `{accessibility}`:

## Visualização dos níveis e da diferença de acessibilidade

FSADFSD

## Distribuição da acessibilidade entre grupos sociais

FASDFSDA